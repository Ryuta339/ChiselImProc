$date
2020-10-20T07:01+0000
$end
$version
0.2
$end
$comment

$end
$timescale 1ns  $end
$scope module MulAdd $end
 $var wire 32 ! io_a_15 $end
 $var wire 64 " _T $end
 $var wire 32 # io_b_13 $end
 $var wire 32 $ io_b_6 $end
 $var wire 64 % tmp $end
 $var wire 32 & io_a_1 $end
 $var wire 32 ' io_b_0 $end
 $var wire 32 ( io_b_9 $end
 $var wire 32 ) io_b_10 $end
 $var wire 32 * io_a_4 $end
 $var wire 32 + io_b_3 $end
 $var wire 32 , io_output $end
 $var wire 32 - io_a_11 $end
 $var wire 32 . io_a_7 $end
 $var wire 32 / io_a_14 $end
 $var wire 32 0 io_b_12 $end
 $var wire 32 1 io_a_6 $end
 $var wire 32 2 io_b_5 $end
 $var wire 32 3 io_b_15 $end
 $var wire 32 4 io_a_9 $end
 $var wire 1 5 clock $end
 $var wire 32 6 io_a_13 $end
 $var wire 32 7 io_a_0 $end
 $var wire 32 8 io_b_8 $end
 $var wire 32 9 io_b_2 $end
 $var wire 32 : io_a_3 $end
 $var wire 32 ; io_a_10 $end
 $var wire 32 < io_b_1 $end
 $var wire 32 = io_a_2 $end
 $var wire 32 > io_b_11 $end
 $var wire 32 ? io_a_5 $end
 $var wire 32 @ io_b_4 $end
 $var wire 1 A reset $end
 $var wire 32 B io_b_14 $end
 $var wire 32 C io_a_12 $end
 $var wire 32 D io_b_7 $end
 $var wire 32 E io_a_8 $end
$upscope $end
$enddefinitions $end
$dumpvars
b00000000000000000000000000000000 &
b00000000000000000000000000000000 D
b00000000000000000000000000000000 <
b00000000000000000000000000000000 '
b00000000000000000000000000000000 =
b00000000000000000000000000000000 (
b00000000000000000000000000000000 >
b00000000000000000000000000000000 !
b00000000000000000000000000000000 ?
b00000000000000000000000000000000 7
b00000000000000000000000000000000 8
b00000000000000000000000000000000 #
b00000000000000000000000000000000 9
b00000000000000000000000000000000 :
b00000000000000000000000000000000 2
b00000000000000000000000000000000 3
b00000000000000000000000000000000 4
05
b00000000000000000000000000000000 6
b00000000000000000000000000000000 .
b00000000000000000000000000000000 /
b00000000000000000000000000000000 E
b00000000000000000000000000000000 0
b00000000000000000000000000000000 1
b00000000000000000000000000000000 )
b00000000000000000000000000000000 *
b0000000000000000000000000000000000000000000000000000000000000000 "
b00000000000000000000000000000000 @
b00000000000000000000000000000000 +
b00000000000000000000000000000000 ,
b00000000000000000000000000000000 $
0A
b00000000000000000000000000000000 B
b00000000000000000000000000000000 -
b0000000000000000000000000000000000000000000000000000000000000000 %
b00000000000000000000000000000000 C
b00000000000000000000000000000000 ;
$end
#0
1A
#1
15
#6
05
#11
15
#16
05
#21
15
#26
05
#31
15
#36
05
#41
15
#46
b00000000000000000000111111101010 3
b00000000000000000000100001011110 <
b00000000000000000000000111011101 4
05
b00000000000000000000011011111111 6
b00000000000000000000001011110100 7
b00000000000000000000111001110101 /
b00000000000000000000101000001100 0
b00000000000000000000010100001010 1
b00000000000000000000000000111011 2
b00000000000000000000110000011101 *
b00000000000000000000010101011000 +
0A
b00000100001100010010101100010111 ,
b00000000000000000000110011110010 B
b00000000000000000000100001000010 -
b0000000000000000000000000000000000000100001100010010101100010111 %
b00000000000000000000011001110110 C
b00000000000000000000101111101101 .
b00000000000000000000000100101100 &
b00000000000000000000100111010100 D
b00000000000000000000001101110110 '
b00000000000000000000000110011010 E
b00000000000000000000100100011101 =
b00000000000000000000100100111111 (
b00000000000000000000101101111001 >
b00000000000000000000001100010001 )
b00000000000000000000110100011110 !
b00000000000000000000101111001101 ?
b0000000000000000000000000000000000000000000010100011100001111000 "
b00000000000000000000100010110101 @
b00000000000000000000110111001010 8
b00000000000000000000100000110100 #
b00000000000000000000110000011011 9
b00000000000000000000100011010101 $
b00000000000000000000000001111011 :
b00000000000000000000010111100111 ;
