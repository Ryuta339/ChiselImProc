;buildInfoPackage: chisel3, version: 3.3.1, scalaVersion: 2.12.11, sbtVersion: 1.3.10
circuit ChiselImProc : 
  module ImageFilter : 
    input clock : Clock
    input reset : Reset
    output io : {flip enq : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<24>, user : UInt<1>, last : UInt<1>}, deq : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<24>, user : UInt<1>, last : UInt<1>}, state_reg : UInt<2>, shadow_reg : UInt<24>, shadow_user : UInt<1>, shadow_last : UInt<1>}
    
    io.deq.last <= UInt<1>("h00") @[ChiselImProc.scala 40:17]
    io.deq.user <= UInt<1>("h00") @[ChiselImProc.scala 41:17]
    reg stateReg : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[ChiselImProc.scala 46:28]
    reg dataReg : UInt<24>, clock @[ChiselImProc.scala 48:23]
    reg shadowReg : UInt<24>, clock @[ChiselImProc.scala 50:25]
    reg userReg : UInt<1>, clock @[ChiselImProc.scala 51:23]
    reg shadowUserReg : UInt<1>, clock @[ChiselImProc.scala 52:29]
    reg lastReg : UInt<1>, clock @[ChiselImProc.scala 53:23]
    reg shadowLastReg : UInt<1>, clock @[ChiselImProc.scala 54:29]
    node _T = eq(UInt<2>("h00"), stateReg) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      when io.enq.valid : @[ChiselImProc.scala 58:33]
        stateReg <= UInt<2>("h01") @[ChiselImProc.scala 59:26]
        dataReg <= io.enq.bits @[ChiselImProc.scala 60:25]
        userReg <= io.enq.user @[ChiselImProc.scala 61:25]
        lastReg <= io.enq.last @[ChiselImProc.scala 62:25]
        skip @[ChiselImProc.scala 58:33]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_1 = eq(UInt<2>("h01"), stateReg) @[Conditional.scala 37:30]
      when _T_1 : @[Conditional.scala 39:67]
        node _T_2 = eq(io.enq.valid, UInt<1>("h00")) @[ChiselImProc.scala 66:35]
        node _T_3 = and(io.deq.ready, _T_2) @[ChiselImProc.scala 66:32]
        when _T_3 : @[ChiselImProc.scala 66:50]
          stateReg <= UInt<2>("h00") @[ChiselImProc.scala 67:26]
          skip @[ChiselImProc.scala 66:50]
        else : @[ChiselImProc.scala 68:55]
          node _T_4 = and(io.deq.ready, io.enq.valid) @[ChiselImProc.scala 68:38]
          when _T_4 : @[ChiselImProc.scala 68:55]
            stateReg <= UInt<2>("h01") @[ChiselImProc.scala 69:26]
            dataReg <= io.enq.bits @[ChiselImProc.scala 70:25]
            userReg <= io.enq.user @[ChiselImProc.scala 71:25]
            lastReg <= io.enq.last @[ChiselImProc.scala 72:25]
            skip @[ChiselImProc.scala 68:55]
          else : @[ChiselImProc.scala 73:56]
            node _T_5 = eq(io.deq.ready, UInt<1>("h00")) @[ChiselImProc.scala 73:25]
            node _T_6 = and(_T_5, io.enq.valid) @[ChiselImProc.scala 73:39]
            when _T_6 : @[ChiselImProc.scala 73:56]
              stateReg <= UInt<2>("h02") @[ChiselImProc.scala 74:26]
              shadowReg <= io.enq.bits @[ChiselImProc.scala 75:27]
              shadowUserReg <= io.enq.user @[ChiselImProc.scala 76:31]
              shadowLastReg <= io.enq.last @[ChiselImProc.scala 77:31]
              skip @[ChiselImProc.scala 73:56]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_7 = eq(UInt<2>("h02"), stateReg) @[Conditional.scala 37:30]
        when _T_7 : @[Conditional.scala 39:67]
          when io.deq.ready : @[ChiselImProc.scala 81:33]
            dataReg <= shadowReg @[ChiselImProc.scala 82:25]
            userReg <= shadowUserReg @[ChiselImProc.scala 83:25]
            lastReg <= shadowLastReg @[ChiselImProc.scala 84:25]
            stateReg <= UInt<2>("h01") @[ChiselImProc.scala 85:26]
            skip @[ChiselImProc.scala 81:33]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_8 = eq(UInt<2>("h03"), stateReg) @[Conditional.scala 37:30]
          when _T_8 : @[Conditional.scala 39:67]
            stateReg <= UInt<2>("h00") @[ChiselImProc.scala 89:22]
            skip @[Conditional.scala 39:67]
    node _T_9 = eq(stateReg, UInt<2>("h00")) @[ChiselImProc.scala 99:31]
    node _T_10 = eq(stateReg, UInt<2>("h01")) @[ChiselImProc.scala 99:53]
    node _T_11 = or(_T_9, _T_10) @[ChiselImProc.scala 99:41]
    node _T_12 = eq(stateReg, UInt<2>("h03")) @[ChiselImProc.scala 99:73]
    node _T_13 = or(_T_11, _T_12) @[ChiselImProc.scala 99:61]
    io.enq.ready <= _T_13 @[ChiselImProc.scala 99:18]
    node _T_14 = eq(stateReg, UInt<2>("h01")) @[ChiselImProc.scala 100:31]
    node _T_15 = eq(stateReg, UInt<2>("h02")) @[ChiselImProc.scala 100:51]
    node _T_16 = or(_T_14, _T_15) @[ChiselImProc.scala 100:39]
    io.deq.valid <= _T_16 @[ChiselImProc.scala 100:18]
    io.state_reg <= stateReg @[ChiselImProc.scala 102:18]
    io.shadow_reg <= dataReg @[ChiselImProc.scala 108:19]
    io.shadow_user <= userReg @[ChiselImProc.scala 109:20]
    io.shadow_last <= lastReg @[ChiselImProc.scala 110:20]
    io.deq.last <= io.enq.last @[ChiselImProc.scala 113:17]
    io.deq.user <= io.enq.user @[ChiselImProc.scala 114:17]
    io.deq.bits <= dataReg @[ChiselImProc.scala 116:17]
    
  module ImageFilter_1 : 
    input clock : Clock
    input reset : Reset
    output io : {flip enq : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<24>, user : UInt<1>, last : UInt<1>}, deq : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<24>, user : UInt<1>, last : UInt<1>}, state_reg : UInt<2>, shadow_reg : UInt<24>, shadow_user : UInt<1>, shadow_last : UInt<1>}
    
    io.deq.last <= UInt<1>("h00") @[ChiselImProc.scala 40:17]
    io.deq.user <= UInt<1>("h00") @[ChiselImProc.scala 41:17]
    reg stateReg : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[ChiselImProc.scala 46:28]
    reg dataReg : UInt<24>, clock @[ChiselImProc.scala 48:23]
    reg shadowReg : UInt<24>, clock @[ChiselImProc.scala 50:25]
    reg userReg : UInt<1>, clock @[ChiselImProc.scala 51:23]
    reg shadowUserReg : UInt<1>, clock @[ChiselImProc.scala 52:29]
    reg lastReg : UInt<1>, clock @[ChiselImProc.scala 53:23]
    reg shadowLastReg : UInt<1>, clock @[ChiselImProc.scala 54:29]
    node _T = eq(UInt<2>("h00"), stateReg) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      when io.enq.valid : @[ChiselImProc.scala 58:33]
        stateReg <= UInt<2>("h01") @[ChiselImProc.scala 59:26]
        dataReg <= io.enq.bits @[ChiselImProc.scala 60:25]
        userReg <= io.enq.user @[ChiselImProc.scala 61:25]
        lastReg <= io.enq.last @[ChiselImProc.scala 62:25]
        skip @[ChiselImProc.scala 58:33]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_1 = eq(UInt<2>("h01"), stateReg) @[Conditional.scala 37:30]
      when _T_1 : @[Conditional.scala 39:67]
        node _T_2 = eq(io.enq.valid, UInt<1>("h00")) @[ChiselImProc.scala 66:35]
        node _T_3 = and(io.deq.ready, _T_2) @[ChiselImProc.scala 66:32]
        when _T_3 : @[ChiselImProc.scala 66:50]
          stateReg <= UInt<2>("h00") @[ChiselImProc.scala 67:26]
          skip @[ChiselImProc.scala 66:50]
        else : @[ChiselImProc.scala 68:55]
          node _T_4 = and(io.deq.ready, io.enq.valid) @[ChiselImProc.scala 68:38]
          when _T_4 : @[ChiselImProc.scala 68:55]
            stateReg <= UInt<2>("h01") @[ChiselImProc.scala 69:26]
            dataReg <= io.enq.bits @[ChiselImProc.scala 70:25]
            userReg <= io.enq.user @[ChiselImProc.scala 71:25]
            lastReg <= io.enq.last @[ChiselImProc.scala 72:25]
            skip @[ChiselImProc.scala 68:55]
          else : @[ChiselImProc.scala 73:56]
            node _T_5 = eq(io.deq.ready, UInt<1>("h00")) @[ChiselImProc.scala 73:25]
            node _T_6 = and(_T_5, io.enq.valid) @[ChiselImProc.scala 73:39]
            when _T_6 : @[ChiselImProc.scala 73:56]
              stateReg <= UInt<2>("h02") @[ChiselImProc.scala 74:26]
              shadowReg <= io.enq.bits @[ChiselImProc.scala 75:27]
              shadowUserReg <= io.enq.user @[ChiselImProc.scala 76:31]
              shadowLastReg <= io.enq.last @[ChiselImProc.scala 77:31]
              skip @[ChiselImProc.scala 73:56]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_7 = eq(UInt<2>("h02"), stateReg) @[Conditional.scala 37:30]
        when _T_7 : @[Conditional.scala 39:67]
          when io.deq.ready : @[ChiselImProc.scala 81:33]
            dataReg <= shadowReg @[ChiselImProc.scala 82:25]
            userReg <= shadowUserReg @[ChiselImProc.scala 83:25]
            lastReg <= shadowLastReg @[ChiselImProc.scala 84:25]
            stateReg <= UInt<2>("h01") @[ChiselImProc.scala 85:26]
            skip @[ChiselImProc.scala 81:33]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_8 = eq(UInt<2>("h03"), stateReg) @[Conditional.scala 37:30]
          when _T_8 : @[Conditional.scala 39:67]
            stateReg <= UInt<2>("h00") @[ChiselImProc.scala 89:22]
            skip @[Conditional.scala 39:67]
    node _T_9 = eq(stateReg, UInt<2>("h00")) @[ChiselImProc.scala 99:31]
    node _T_10 = eq(stateReg, UInt<2>("h01")) @[ChiselImProc.scala 99:53]
    node _T_11 = or(_T_9, _T_10) @[ChiselImProc.scala 99:41]
    node _T_12 = eq(stateReg, UInt<2>("h03")) @[ChiselImProc.scala 99:73]
    node _T_13 = or(_T_11, _T_12) @[ChiselImProc.scala 99:61]
    io.enq.ready <= _T_13 @[ChiselImProc.scala 99:18]
    node _T_14 = eq(stateReg, UInt<2>("h01")) @[ChiselImProc.scala 100:31]
    node _T_15 = eq(stateReg, UInt<2>("h02")) @[ChiselImProc.scala 100:51]
    node _T_16 = or(_T_14, _T_15) @[ChiselImProc.scala 100:39]
    io.deq.valid <= _T_16 @[ChiselImProc.scala 100:18]
    io.state_reg <= stateReg @[ChiselImProc.scala 102:18]
    io.shadow_reg <= dataReg @[ChiselImProc.scala 108:19]
    io.shadow_user <= userReg @[ChiselImProc.scala 109:20]
    io.shadow_last <= lastReg @[ChiselImProc.scala 110:20]
    io.deq.last <= io.enq.last @[ChiselImProc.scala 113:17]
    io.deq.user <= io.enq.user @[ChiselImProc.scala 114:17]
    io.deq.bits <= dataReg @[ChiselImProc.scala 116:17]
    
  module ImageFilter_2 : 
    input clock : Clock
    input reset : Reset
    output io : {flip enq : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<24>, user : UInt<1>, last : UInt<1>}, deq : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<24>, user : UInt<1>, last : UInt<1>}, state_reg : UInt<2>, shadow_reg : UInt<24>, shadow_user : UInt<1>, shadow_last : UInt<1>}
    
    io.deq.last <= UInt<1>("h00") @[ChiselImProc.scala 40:17]
    io.deq.user <= UInt<1>("h00") @[ChiselImProc.scala 41:17]
    reg stateReg : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[ChiselImProc.scala 46:28]
    reg dataReg : UInt<24>, clock @[ChiselImProc.scala 48:23]
    reg shadowReg : UInt<24>, clock @[ChiselImProc.scala 50:25]
    reg userReg : UInt<1>, clock @[ChiselImProc.scala 51:23]
    reg shadowUserReg : UInt<1>, clock @[ChiselImProc.scala 52:29]
    reg lastReg : UInt<1>, clock @[ChiselImProc.scala 53:23]
    reg shadowLastReg : UInt<1>, clock @[ChiselImProc.scala 54:29]
    node _T = eq(UInt<2>("h00"), stateReg) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      when io.enq.valid : @[ChiselImProc.scala 58:33]
        stateReg <= UInt<2>("h01") @[ChiselImProc.scala 59:26]
        dataReg <= io.enq.bits @[ChiselImProc.scala 60:25]
        userReg <= io.enq.user @[ChiselImProc.scala 61:25]
        lastReg <= io.enq.last @[ChiselImProc.scala 62:25]
        skip @[ChiselImProc.scala 58:33]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_1 = eq(UInt<2>("h01"), stateReg) @[Conditional.scala 37:30]
      when _T_1 : @[Conditional.scala 39:67]
        node _T_2 = eq(io.enq.valid, UInt<1>("h00")) @[ChiselImProc.scala 66:35]
        node _T_3 = and(io.deq.ready, _T_2) @[ChiselImProc.scala 66:32]
        when _T_3 : @[ChiselImProc.scala 66:50]
          stateReg <= UInt<2>("h00") @[ChiselImProc.scala 67:26]
          skip @[ChiselImProc.scala 66:50]
        else : @[ChiselImProc.scala 68:55]
          node _T_4 = and(io.deq.ready, io.enq.valid) @[ChiselImProc.scala 68:38]
          when _T_4 : @[ChiselImProc.scala 68:55]
            stateReg <= UInt<2>("h01") @[ChiselImProc.scala 69:26]
            dataReg <= io.enq.bits @[ChiselImProc.scala 70:25]
            userReg <= io.enq.user @[ChiselImProc.scala 71:25]
            lastReg <= io.enq.last @[ChiselImProc.scala 72:25]
            skip @[ChiselImProc.scala 68:55]
          else : @[ChiselImProc.scala 73:56]
            node _T_5 = eq(io.deq.ready, UInt<1>("h00")) @[ChiselImProc.scala 73:25]
            node _T_6 = and(_T_5, io.enq.valid) @[ChiselImProc.scala 73:39]
            when _T_6 : @[ChiselImProc.scala 73:56]
              stateReg <= UInt<2>("h02") @[ChiselImProc.scala 74:26]
              shadowReg <= io.enq.bits @[ChiselImProc.scala 75:27]
              shadowUserReg <= io.enq.user @[ChiselImProc.scala 76:31]
              shadowLastReg <= io.enq.last @[ChiselImProc.scala 77:31]
              skip @[ChiselImProc.scala 73:56]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_7 = eq(UInt<2>("h02"), stateReg) @[Conditional.scala 37:30]
        when _T_7 : @[Conditional.scala 39:67]
          when io.deq.ready : @[ChiselImProc.scala 81:33]
            dataReg <= shadowReg @[ChiselImProc.scala 82:25]
            userReg <= shadowUserReg @[ChiselImProc.scala 83:25]
            lastReg <= shadowLastReg @[ChiselImProc.scala 84:25]
            stateReg <= UInt<2>("h01") @[ChiselImProc.scala 85:26]
            skip @[ChiselImProc.scala 81:33]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_8 = eq(UInt<2>("h03"), stateReg) @[Conditional.scala 37:30]
          when _T_8 : @[Conditional.scala 39:67]
            stateReg <= UInt<2>("h00") @[ChiselImProc.scala 89:22]
            skip @[Conditional.scala 39:67]
    node _T_9 = eq(stateReg, UInt<2>("h00")) @[ChiselImProc.scala 99:31]
    node _T_10 = eq(stateReg, UInt<2>("h01")) @[ChiselImProc.scala 99:53]
    node _T_11 = or(_T_9, _T_10) @[ChiselImProc.scala 99:41]
    node _T_12 = eq(stateReg, UInt<2>("h03")) @[ChiselImProc.scala 99:73]
    node _T_13 = or(_T_11, _T_12) @[ChiselImProc.scala 99:61]
    io.enq.ready <= _T_13 @[ChiselImProc.scala 99:18]
    node _T_14 = eq(stateReg, UInt<2>("h01")) @[ChiselImProc.scala 100:31]
    node _T_15 = eq(stateReg, UInt<2>("h02")) @[ChiselImProc.scala 100:51]
    node _T_16 = or(_T_14, _T_15) @[ChiselImProc.scala 100:39]
    io.deq.valid <= _T_16 @[ChiselImProc.scala 100:18]
    io.state_reg <= stateReg @[ChiselImProc.scala 102:18]
    io.shadow_reg <= dataReg @[ChiselImProc.scala 108:19]
    io.shadow_user <= userReg @[ChiselImProc.scala 109:20]
    io.shadow_last <= lastReg @[ChiselImProc.scala 110:20]
    io.deq.last <= io.enq.last @[ChiselImProc.scala 113:17]
    io.deq.user <= io.enq.user @[ChiselImProc.scala 114:17]
    io.deq.bits <= dataReg @[ChiselImProc.scala 116:17]
    
  module ImageFilter_3 : 
    input clock : Clock
    input reset : Reset
    output io : {flip enq : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<24>, user : UInt<1>, last : UInt<1>}, deq : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<24>, user : UInt<1>, last : UInt<1>}, state_reg : UInt<2>, shadow_reg : UInt<24>, shadow_user : UInt<1>, shadow_last : UInt<1>}
    
    io.deq.last <= UInt<1>("h00") @[ChiselImProc.scala 40:17]
    io.deq.user <= UInt<1>("h00") @[ChiselImProc.scala 41:17]
    reg stateReg : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[ChiselImProc.scala 46:28]
    reg dataReg : UInt<24>, clock @[ChiselImProc.scala 48:23]
    reg shadowReg : UInt<24>, clock @[ChiselImProc.scala 50:25]
    reg userReg : UInt<1>, clock @[ChiselImProc.scala 51:23]
    reg shadowUserReg : UInt<1>, clock @[ChiselImProc.scala 52:29]
    reg lastReg : UInt<1>, clock @[ChiselImProc.scala 53:23]
    reg shadowLastReg : UInt<1>, clock @[ChiselImProc.scala 54:29]
    node _T = eq(UInt<2>("h00"), stateReg) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      when io.enq.valid : @[ChiselImProc.scala 58:33]
        stateReg <= UInt<2>("h01") @[ChiselImProc.scala 59:26]
        dataReg <= io.enq.bits @[ChiselImProc.scala 60:25]
        userReg <= io.enq.user @[ChiselImProc.scala 61:25]
        lastReg <= io.enq.last @[ChiselImProc.scala 62:25]
        skip @[ChiselImProc.scala 58:33]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_1 = eq(UInt<2>("h01"), stateReg) @[Conditional.scala 37:30]
      when _T_1 : @[Conditional.scala 39:67]
        node _T_2 = eq(io.enq.valid, UInt<1>("h00")) @[ChiselImProc.scala 66:35]
        node _T_3 = and(io.deq.ready, _T_2) @[ChiselImProc.scala 66:32]
        when _T_3 : @[ChiselImProc.scala 66:50]
          stateReg <= UInt<2>("h00") @[ChiselImProc.scala 67:26]
          skip @[ChiselImProc.scala 66:50]
        else : @[ChiselImProc.scala 68:55]
          node _T_4 = and(io.deq.ready, io.enq.valid) @[ChiselImProc.scala 68:38]
          when _T_4 : @[ChiselImProc.scala 68:55]
            stateReg <= UInt<2>("h01") @[ChiselImProc.scala 69:26]
            dataReg <= io.enq.bits @[ChiselImProc.scala 70:25]
            userReg <= io.enq.user @[ChiselImProc.scala 71:25]
            lastReg <= io.enq.last @[ChiselImProc.scala 72:25]
            skip @[ChiselImProc.scala 68:55]
          else : @[ChiselImProc.scala 73:56]
            node _T_5 = eq(io.deq.ready, UInt<1>("h00")) @[ChiselImProc.scala 73:25]
            node _T_6 = and(_T_5, io.enq.valid) @[ChiselImProc.scala 73:39]
            when _T_6 : @[ChiselImProc.scala 73:56]
              stateReg <= UInt<2>("h02") @[ChiselImProc.scala 74:26]
              shadowReg <= io.enq.bits @[ChiselImProc.scala 75:27]
              shadowUserReg <= io.enq.user @[ChiselImProc.scala 76:31]
              shadowLastReg <= io.enq.last @[ChiselImProc.scala 77:31]
              skip @[ChiselImProc.scala 73:56]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_7 = eq(UInt<2>("h02"), stateReg) @[Conditional.scala 37:30]
        when _T_7 : @[Conditional.scala 39:67]
          when io.deq.ready : @[ChiselImProc.scala 81:33]
            dataReg <= shadowReg @[ChiselImProc.scala 82:25]
            userReg <= shadowUserReg @[ChiselImProc.scala 83:25]
            lastReg <= shadowLastReg @[ChiselImProc.scala 84:25]
            stateReg <= UInt<2>("h01") @[ChiselImProc.scala 85:26]
            skip @[ChiselImProc.scala 81:33]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_8 = eq(UInt<2>("h03"), stateReg) @[Conditional.scala 37:30]
          when _T_8 : @[Conditional.scala 39:67]
            stateReg <= UInt<2>("h00") @[ChiselImProc.scala 89:22]
            skip @[Conditional.scala 39:67]
    node _T_9 = eq(stateReg, UInt<2>("h00")) @[ChiselImProc.scala 99:31]
    node _T_10 = eq(stateReg, UInt<2>("h01")) @[ChiselImProc.scala 99:53]
    node _T_11 = or(_T_9, _T_10) @[ChiselImProc.scala 99:41]
    node _T_12 = eq(stateReg, UInt<2>("h03")) @[ChiselImProc.scala 99:73]
    node _T_13 = or(_T_11, _T_12) @[ChiselImProc.scala 99:61]
    io.enq.ready <= _T_13 @[ChiselImProc.scala 99:18]
    node _T_14 = eq(stateReg, UInt<2>("h01")) @[ChiselImProc.scala 100:31]
    node _T_15 = eq(stateReg, UInt<2>("h02")) @[ChiselImProc.scala 100:51]
    node _T_16 = or(_T_14, _T_15) @[ChiselImProc.scala 100:39]
    io.deq.valid <= _T_16 @[ChiselImProc.scala 100:18]
    io.state_reg <= stateReg @[ChiselImProc.scala 102:18]
    io.shadow_reg <= dataReg @[ChiselImProc.scala 108:19]
    io.shadow_user <= userReg @[ChiselImProc.scala 109:20]
    io.shadow_last <= lastReg @[ChiselImProc.scala 110:20]
    io.deq.last <= io.enq.last @[ChiselImProc.scala 113:17]
    io.deq.user <= io.enq.user @[ChiselImProc.scala 114:17]
    io.deq.bits <= dataReg @[ChiselImProc.scala 116:17]
    
  module ImageFilter_4 : 
    input clock : Clock
    input reset : Reset
    output io : {flip enq : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<24>, user : UInt<1>, last : UInt<1>}, deq : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<24>, user : UInt<1>, last : UInt<1>}, state_reg : UInt<2>, shadow_reg : UInt<24>, shadow_user : UInt<1>, shadow_last : UInt<1>}
    
    io.deq.last <= UInt<1>("h00") @[ChiselImProc.scala 40:17]
    io.deq.user <= UInt<1>("h00") @[ChiselImProc.scala 41:17]
    reg stateReg : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[ChiselImProc.scala 46:28]
    reg dataReg : UInt<24>, clock @[ChiselImProc.scala 48:23]
    reg shadowReg : UInt<24>, clock @[ChiselImProc.scala 50:25]
    reg userReg : UInt<1>, clock @[ChiselImProc.scala 51:23]
    reg shadowUserReg : UInt<1>, clock @[ChiselImProc.scala 52:29]
    reg lastReg : UInt<1>, clock @[ChiselImProc.scala 53:23]
    reg shadowLastReg : UInt<1>, clock @[ChiselImProc.scala 54:29]
    node _T = eq(UInt<2>("h00"), stateReg) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      when io.enq.valid : @[ChiselImProc.scala 58:33]
        stateReg <= UInt<2>("h01") @[ChiselImProc.scala 59:26]
        dataReg <= io.enq.bits @[ChiselImProc.scala 60:25]
        userReg <= io.enq.user @[ChiselImProc.scala 61:25]
        lastReg <= io.enq.last @[ChiselImProc.scala 62:25]
        skip @[ChiselImProc.scala 58:33]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_1 = eq(UInt<2>("h01"), stateReg) @[Conditional.scala 37:30]
      when _T_1 : @[Conditional.scala 39:67]
        node _T_2 = eq(io.enq.valid, UInt<1>("h00")) @[ChiselImProc.scala 66:35]
        node _T_3 = and(io.deq.ready, _T_2) @[ChiselImProc.scala 66:32]
        when _T_3 : @[ChiselImProc.scala 66:50]
          stateReg <= UInt<2>("h00") @[ChiselImProc.scala 67:26]
          skip @[ChiselImProc.scala 66:50]
        else : @[ChiselImProc.scala 68:55]
          node _T_4 = and(io.deq.ready, io.enq.valid) @[ChiselImProc.scala 68:38]
          when _T_4 : @[ChiselImProc.scala 68:55]
            stateReg <= UInt<2>("h01") @[ChiselImProc.scala 69:26]
            dataReg <= io.enq.bits @[ChiselImProc.scala 70:25]
            userReg <= io.enq.user @[ChiselImProc.scala 71:25]
            lastReg <= io.enq.last @[ChiselImProc.scala 72:25]
            skip @[ChiselImProc.scala 68:55]
          else : @[ChiselImProc.scala 73:56]
            node _T_5 = eq(io.deq.ready, UInt<1>("h00")) @[ChiselImProc.scala 73:25]
            node _T_6 = and(_T_5, io.enq.valid) @[ChiselImProc.scala 73:39]
            when _T_6 : @[ChiselImProc.scala 73:56]
              stateReg <= UInt<2>("h02") @[ChiselImProc.scala 74:26]
              shadowReg <= io.enq.bits @[ChiselImProc.scala 75:27]
              shadowUserReg <= io.enq.user @[ChiselImProc.scala 76:31]
              shadowLastReg <= io.enq.last @[ChiselImProc.scala 77:31]
              skip @[ChiselImProc.scala 73:56]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_7 = eq(UInt<2>("h02"), stateReg) @[Conditional.scala 37:30]
        when _T_7 : @[Conditional.scala 39:67]
          when io.deq.ready : @[ChiselImProc.scala 81:33]
            dataReg <= shadowReg @[ChiselImProc.scala 82:25]
            userReg <= shadowUserReg @[ChiselImProc.scala 83:25]
            lastReg <= shadowLastReg @[ChiselImProc.scala 84:25]
            stateReg <= UInt<2>("h01") @[ChiselImProc.scala 85:26]
            skip @[ChiselImProc.scala 81:33]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_8 = eq(UInt<2>("h03"), stateReg) @[Conditional.scala 37:30]
          when _T_8 : @[Conditional.scala 39:67]
            stateReg <= UInt<2>("h00") @[ChiselImProc.scala 89:22]
            skip @[Conditional.scala 39:67]
    node _T_9 = eq(stateReg, UInt<2>("h00")) @[ChiselImProc.scala 99:31]
    node _T_10 = eq(stateReg, UInt<2>("h01")) @[ChiselImProc.scala 99:53]
    node _T_11 = or(_T_9, _T_10) @[ChiselImProc.scala 99:41]
    node _T_12 = eq(stateReg, UInt<2>("h03")) @[ChiselImProc.scala 99:73]
    node _T_13 = or(_T_11, _T_12) @[ChiselImProc.scala 99:61]
    io.enq.ready <= _T_13 @[ChiselImProc.scala 99:18]
    node _T_14 = eq(stateReg, UInt<2>("h01")) @[ChiselImProc.scala 100:31]
    node _T_15 = eq(stateReg, UInt<2>("h02")) @[ChiselImProc.scala 100:51]
    node _T_16 = or(_T_14, _T_15) @[ChiselImProc.scala 100:39]
    io.deq.valid <= _T_16 @[ChiselImProc.scala 100:18]
    io.state_reg <= stateReg @[ChiselImProc.scala 102:18]
    io.shadow_reg <= dataReg @[ChiselImProc.scala 108:19]
    io.shadow_user <= userReg @[ChiselImProc.scala 109:20]
    io.shadow_last <= lastReg @[ChiselImProc.scala 110:20]
    io.deq.last <= io.enq.last @[ChiselImProc.scala 113:17]
    io.deq.user <= io.enq.user @[ChiselImProc.scala 114:17]
    io.deq.bits <= dataReg @[ChiselImProc.scala 116:17]
    
  module ImageFilter_5 : 
    input clock : Clock
    input reset : Reset
    output io : {flip enq : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<24>, user : UInt<1>, last : UInt<1>}, deq : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<24>, user : UInt<1>, last : UInt<1>}, state_reg : UInt<2>, shadow_reg : UInt<24>, shadow_user : UInt<1>, shadow_last : UInt<1>}
    
    io.deq.last <= UInt<1>("h00") @[ChiselImProc.scala 40:17]
    io.deq.user <= UInt<1>("h00") @[ChiselImProc.scala 41:17]
    reg stateReg : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[ChiselImProc.scala 46:28]
    reg dataReg : UInt<24>, clock @[ChiselImProc.scala 48:23]
    reg shadowReg : UInt<24>, clock @[ChiselImProc.scala 50:25]
    reg userReg : UInt<1>, clock @[ChiselImProc.scala 51:23]
    reg shadowUserReg : UInt<1>, clock @[ChiselImProc.scala 52:29]
    reg lastReg : UInt<1>, clock @[ChiselImProc.scala 53:23]
    reg shadowLastReg : UInt<1>, clock @[ChiselImProc.scala 54:29]
    node _T = eq(UInt<2>("h00"), stateReg) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      when io.enq.valid : @[ChiselImProc.scala 58:33]
        stateReg <= UInt<2>("h01") @[ChiselImProc.scala 59:26]
        dataReg <= io.enq.bits @[ChiselImProc.scala 60:25]
        userReg <= io.enq.user @[ChiselImProc.scala 61:25]
        lastReg <= io.enq.last @[ChiselImProc.scala 62:25]
        skip @[ChiselImProc.scala 58:33]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_1 = eq(UInt<2>("h01"), stateReg) @[Conditional.scala 37:30]
      when _T_1 : @[Conditional.scala 39:67]
        node _T_2 = eq(io.enq.valid, UInt<1>("h00")) @[ChiselImProc.scala 66:35]
        node _T_3 = and(io.deq.ready, _T_2) @[ChiselImProc.scala 66:32]
        when _T_3 : @[ChiselImProc.scala 66:50]
          stateReg <= UInt<2>("h00") @[ChiselImProc.scala 67:26]
          skip @[ChiselImProc.scala 66:50]
        else : @[ChiselImProc.scala 68:55]
          node _T_4 = and(io.deq.ready, io.enq.valid) @[ChiselImProc.scala 68:38]
          when _T_4 : @[ChiselImProc.scala 68:55]
            stateReg <= UInt<2>("h01") @[ChiselImProc.scala 69:26]
            dataReg <= io.enq.bits @[ChiselImProc.scala 70:25]
            userReg <= io.enq.user @[ChiselImProc.scala 71:25]
            lastReg <= io.enq.last @[ChiselImProc.scala 72:25]
            skip @[ChiselImProc.scala 68:55]
          else : @[ChiselImProc.scala 73:56]
            node _T_5 = eq(io.deq.ready, UInt<1>("h00")) @[ChiselImProc.scala 73:25]
            node _T_6 = and(_T_5, io.enq.valid) @[ChiselImProc.scala 73:39]
            when _T_6 : @[ChiselImProc.scala 73:56]
              stateReg <= UInt<2>("h02") @[ChiselImProc.scala 74:26]
              shadowReg <= io.enq.bits @[ChiselImProc.scala 75:27]
              shadowUserReg <= io.enq.user @[ChiselImProc.scala 76:31]
              shadowLastReg <= io.enq.last @[ChiselImProc.scala 77:31]
              skip @[ChiselImProc.scala 73:56]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_7 = eq(UInt<2>("h02"), stateReg) @[Conditional.scala 37:30]
        when _T_7 : @[Conditional.scala 39:67]
          when io.deq.ready : @[ChiselImProc.scala 81:33]
            dataReg <= shadowReg @[ChiselImProc.scala 82:25]
            userReg <= shadowUserReg @[ChiselImProc.scala 83:25]
            lastReg <= shadowLastReg @[ChiselImProc.scala 84:25]
            stateReg <= UInt<2>("h01") @[ChiselImProc.scala 85:26]
            skip @[ChiselImProc.scala 81:33]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_8 = eq(UInt<2>("h03"), stateReg) @[Conditional.scala 37:30]
          when _T_8 : @[Conditional.scala 39:67]
            stateReg <= UInt<2>("h00") @[ChiselImProc.scala 89:22]
            skip @[Conditional.scala 39:67]
    node _T_9 = eq(stateReg, UInt<2>("h00")) @[ChiselImProc.scala 99:31]
    node _T_10 = eq(stateReg, UInt<2>("h01")) @[ChiselImProc.scala 99:53]
    node _T_11 = or(_T_9, _T_10) @[ChiselImProc.scala 99:41]
    node _T_12 = eq(stateReg, UInt<2>("h03")) @[ChiselImProc.scala 99:73]
    node _T_13 = or(_T_11, _T_12) @[ChiselImProc.scala 99:61]
    io.enq.ready <= _T_13 @[ChiselImProc.scala 99:18]
    node _T_14 = eq(stateReg, UInt<2>("h01")) @[ChiselImProc.scala 100:31]
    node _T_15 = eq(stateReg, UInt<2>("h02")) @[ChiselImProc.scala 100:51]
    node _T_16 = or(_T_14, _T_15) @[ChiselImProc.scala 100:39]
    io.deq.valid <= _T_16 @[ChiselImProc.scala 100:18]
    io.state_reg <= stateReg @[ChiselImProc.scala 102:18]
    io.shadow_reg <= dataReg @[ChiselImProc.scala 108:19]
    io.shadow_user <= userReg @[ChiselImProc.scala 109:20]
    io.shadow_last <= lastReg @[ChiselImProc.scala 110:20]
    io.deq.last <= io.enq.last @[ChiselImProc.scala 113:17]
    io.deq.user <= io.enq.user @[ChiselImProc.scala 114:17]
    io.deq.bits <= dataReg @[ChiselImProc.scala 116:17]
    
  module ImageFilter_6 : 
    input clock : Clock
    input reset : Reset
    output io : {flip enq : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<24>, user : UInt<1>, last : UInt<1>}, deq : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<24>, user : UInt<1>, last : UInt<1>}, state_reg : UInt<2>, shadow_reg : UInt<24>, shadow_user : UInt<1>, shadow_last : UInt<1>}
    
    io.deq.last <= UInt<1>("h00") @[ChiselImProc.scala 40:17]
    io.deq.user <= UInt<1>("h00") @[ChiselImProc.scala 41:17]
    reg stateReg : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[ChiselImProc.scala 46:28]
    reg dataReg : UInt<24>, clock @[ChiselImProc.scala 48:23]
    reg shadowReg : UInt<24>, clock @[ChiselImProc.scala 50:25]
    reg userReg : UInt<1>, clock @[ChiselImProc.scala 51:23]
    reg shadowUserReg : UInt<1>, clock @[ChiselImProc.scala 52:29]
    reg lastReg : UInt<1>, clock @[ChiselImProc.scala 53:23]
    reg shadowLastReg : UInt<1>, clock @[ChiselImProc.scala 54:29]
    node _T = eq(UInt<2>("h00"), stateReg) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      when io.enq.valid : @[ChiselImProc.scala 58:33]
        stateReg <= UInt<2>("h01") @[ChiselImProc.scala 59:26]
        dataReg <= io.enq.bits @[ChiselImProc.scala 60:25]
        userReg <= io.enq.user @[ChiselImProc.scala 61:25]
        lastReg <= io.enq.last @[ChiselImProc.scala 62:25]
        skip @[ChiselImProc.scala 58:33]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_1 = eq(UInt<2>("h01"), stateReg) @[Conditional.scala 37:30]
      when _T_1 : @[Conditional.scala 39:67]
        node _T_2 = eq(io.enq.valid, UInt<1>("h00")) @[ChiselImProc.scala 66:35]
        node _T_3 = and(io.deq.ready, _T_2) @[ChiselImProc.scala 66:32]
        when _T_3 : @[ChiselImProc.scala 66:50]
          stateReg <= UInt<2>("h00") @[ChiselImProc.scala 67:26]
          skip @[ChiselImProc.scala 66:50]
        else : @[ChiselImProc.scala 68:55]
          node _T_4 = and(io.deq.ready, io.enq.valid) @[ChiselImProc.scala 68:38]
          when _T_4 : @[ChiselImProc.scala 68:55]
            stateReg <= UInt<2>("h01") @[ChiselImProc.scala 69:26]
            dataReg <= io.enq.bits @[ChiselImProc.scala 70:25]
            userReg <= io.enq.user @[ChiselImProc.scala 71:25]
            lastReg <= io.enq.last @[ChiselImProc.scala 72:25]
            skip @[ChiselImProc.scala 68:55]
          else : @[ChiselImProc.scala 73:56]
            node _T_5 = eq(io.deq.ready, UInt<1>("h00")) @[ChiselImProc.scala 73:25]
            node _T_6 = and(_T_5, io.enq.valid) @[ChiselImProc.scala 73:39]
            when _T_6 : @[ChiselImProc.scala 73:56]
              stateReg <= UInt<2>("h02") @[ChiselImProc.scala 74:26]
              shadowReg <= io.enq.bits @[ChiselImProc.scala 75:27]
              shadowUserReg <= io.enq.user @[ChiselImProc.scala 76:31]
              shadowLastReg <= io.enq.last @[ChiselImProc.scala 77:31]
              skip @[ChiselImProc.scala 73:56]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_7 = eq(UInt<2>("h02"), stateReg) @[Conditional.scala 37:30]
        when _T_7 : @[Conditional.scala 39:67]
          when io.deq.ready : @[ChiselImProc.scala 81:33]
            dataReg <= shadowReg @[ChiselImProc.scala 82:25]
            userReg <= shadowUserReg @[ChiselImProc.scala 83:25]
            lastReg <= shadowLastReg @[ChiselImProc.scala 84:25]
            stateReg <= UInt<2>("h01") @[ChiselImProc.scala 85:26]
            skip @[ChiselImProc.scala 81:33]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_8 = eq(UInt<2>("h03"), stateReg) @[Conditional.scala 37:30]
          when _T_8 : @[Conditional.scala 39:67]
            stateReg <= UInt<2>("h00") @[ChiselImProc.scala 89:22]
            skip @[Conditional.scala 39:67]
    node _T_9 = eq(stateReg, UInt<2>("h00")) @[ChiselImProc.scala 99:31]
    node _T_10 = eq(stateReg, UInt<2>("h01")) @[ChiselImProc.scala 99:53]
    node _T_11 = or(_T_9, _T_10) @[ChiselImProc.scala 99:41]
    node _T_12 = eq(stateReg, UInt<2>("h03")) @[ChiselImProc.scala 99:73]
    node _T_13 = or(_T_11, _T_12) @[ChiselImProc.scala 99:61]
    io.enq.ready <= _T_13 @[ChiselImProc.scala 99:18]
    node _T_14 = eq(stateReg, UInt<2>("h01")) @[ChiselImProc.scala 100:31]
    node _T_15 = eq(stateReg, UInt<2>("h02")) @[ChiselImProc.scala 100:51]
    node _T_16 = or(_T_14, _T_15) @[ChiselImProc.scala 100:39]
    io.deq.valid <= _T_16 @[ChiselImProc.scala 100:18]
    io.state_reg <= stateReg @[ChiselImProc.scala 102:18]
    io.shadow_reg <= dataReg @[ChiselImProc.scala 108:19]
    io.shadow_user <= userReg @[ChiselImProc.scala 109:20]
    io.shadow_last <= lastReg @[ChiselImProc.scala 110:20]
    io.deq.last <= io.enq.last @[ChiselImProc.scala 113:17]
    io.deq.user <= io.enq.user @[ChiselImProc.scala 114:17]
    io.deq.bits <= dataReg @[ChiselImProc.scala 116:17]
    
  module ImageFilter_7 : 
    input clock : Clock
    input reset : Reset
    output io : {flip enq : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<24>, user : UInt<1>, last : UInt<1>}, deq : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<24>, user : UInt<1>, last : UInt<1>}, state_reg : UInt<2>, shadow_reg : UInt<24>, shadow_user : UInt<1>, shadow_last : UInt<1>}
    
    io.deq.last <= UInt<1>("h00") @[ChiselImProc.scala 40:17]
    io.deq.user <= UInt<1>("h00") @[ChiselImProc.scala 41:17]
    reg stateReg : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[ChiselImProc.scala 46:28]
    reg dataReg : UInt<24>, clock @[ChiselImProc.scala 48:23]
    reg shadowReg : UInt<24>, clock @[ChiselImProc.scala 50:25]
    reg userReg : UInt<1>, clock @[ChiselImProc.scala 51:23]
    reg shadowUserReg : UInt<1>, clock @[ChiselImProc.scala 52:29]
    reg lastReg : UInt<1>, clock @[ChiselImProc.scala 53:23]
    reg shadowLastReg : UInt<1>, clock @[ChiselImProc.scala 54:29]
    node _T = eq(UInt<2>("h00"), stateReg) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      when io.enq.valid : @[ChiselImProc.scala 58:33]
        stateReg <= UInt<2>("h01") @[ChiselImProc.scala 59:26]
        dataReg <= io.enq.bits @[ChiselImProc.scala 60:25]
        userReg <= io.enq.user @[ChiselImProc.scala 61:25]
        lastReg <= io.enq.last @[ChiselImProc.scala 62:25]
        skip @[ChiselImProc.scala 58:33]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_1 = eq(UInt<2>("h01"), stateReg) @[Conditional.scala 37:30]
      when _T_1 : @[Conditional.scala 39:67]
        node _T_2 = eq(io.enq.valid, UInt<1>("h00")) @[ChiselImProc.scala 66:35]
        node _T_3 = and(io.deq.ready, _T_2) @[ChiselImProc.scala 66:32]
        when _T_3 : @[ChiselImProc.scala 66:50]
          stateReg <= UInt<2>("h00") @[ChiselImProc.scala 67:26]
          skip @[ChiselImProc.scala 66:50]
        else : @[ChiselImProc.scala 68:55]
          node _T_4 = and(io.deq.ready, io.enq.valid) @[ChiselImProc.scala 68:38]
          when _T_4 : @[ChiselImProc.scala 68:55]
            stateReg <= UInt<2>("h01") @[ChiselImProc.scala 69:26]
            dataReg <= io.enq.bits @[ChiselImProc.scala 70:25]
            userReg <= io.enq.user @[ChiselImProc.scala 71:25]
            lastReg <= io.enq.last @[ChiselImProc.scala 72:25]
            skip @[ChiselImProc.scala 68:55]
          else : @[ChiselImProc.scala 73:56]
            node _T_5 = eq(io.deq.ready, UInt<1>("h00")) @[ChiselImProc.scala 73:25]
            node _T_6 = and(_T_5, io.enq.valid) @[ChiselImProc.scala 73:39]
            when _T_6 : @[ChiselImProc.scala 73:56]
              stateReg <= UInt<2>("h02") @[ChiselImProc.scala 74:26]
              shadowReg <= io.enq.bits @[ChiselImProc.scala 75:27]
              shadowUserReg <= io.enq.user @[ChiselImProc.scala 76:31]
              shadowLastReg <= io.enq.last @[ChiselImProc.scala 77:31]
              skip @[ChiselImProc.scala 73:56]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_7 = eq(UInt<2>("h02"), stateReg) @[Conditional.scala 37:30]
        when _T_7 : @[Conditional.scala 39:67]
          when io.deq.ready : @[ChiselImProc.scala 81:33]
            dataReg <= shadowReg @[ChiselImProc.scala 82:25]
            userReg <= shadowUserReg @[ChiselImProc.scala 83:25]
            lastReg <= shadowLastReg @[ChiselImProc.scala 84:25]
            stateReg <= UInt<2>("h01") @[ChiselImProc.scala 85:26]
            skip @[ChiselImProc.scala 81:33]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_8 = eq(UInt<2>("h03"), stateReg) @[Conditional.scala 37:30]
          when _T_8 : @[Conditional.scala 39:67]
            stateReg <= UInt<2>("h00") @[ChiselImProc.scala 89:22]
            skip @[Conditional.scala 39:67]
    node _T_9 = eq(stateReg, UInt<2>("h00")) @[ChiselImProc.scala 99:31]
    node _T_10 = eq(stateReg, UInt<2>("h01")) @[ChiselImProc.scala 99:53]
    node _T_11 = or(_T_9, _T_10) @[ChiselImProc.scala 99:41]
    node _T_12 = eq(stateReg, UInt<2>("h03")) @[ChiselImProc.scala 99:73]
    node _T_13 = or(_T_11, _T_12) @[ChiselImProc.scala 99:61]
    io.enq.ready <= _T_13 @[ChiselImProc.scala 99:18]
    node _T_14 = eq(stateReg, UInt<2>("h01")) @[ChiselImProc.scala 100:31]
    node _T_15 = eq(stateReg, UInt<2>("h02")) @[ChiselImProc.scala 100:51]
    node _T_16 = or(_T_14, _T_15) @[ChiselImProc.scala 100:39]
    io.deq.valid <= _T_16 @[ChiselImProc.scala 100:18]
    io.state_reg <= stateReg @[ChiselImProc.scala 102:18]
    io.shadow_reg <= dataReg @[ChiselImProc.scala 108:19]
    io.shadow_user <= userReg @[ChiselImProc.scala 109:20]
    io.shadow_last <= lastReg @[ChiselImProc.scala 110:20]
    io.deq.last <= io.enq.last @[ChiselImProc.scala 113:17]
    io.deq.user <= io.enq.user @[ChiselImProc.scala 114:17]
    io.deq.bits <= dataReg @[ChiselImProc.scala 116:17]
    
  module ChiselImProc : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip enq : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<24>, user : UInt<1>, last : UInt<1>}, deq : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<24>, user : UInt<1>, last : UInt<1>}, state_reg : UInt<2>, shadow_reg : UInt<24>, shadow_user : UInt<1>, shadow_last : UInt<1>}
    
    inst ImageFilter of ImageFilter @[ChiselImProc.scala 225:47]
    ImageFilter.clock <= clock
    ImageFilter.reset <= reset
    inst ImageFilter_1 of ImageFilter_1 @[ChiselImProc.scala 225:47]
    ImageFilter_1.clock <= clock
    ImageFilter_1.reset <= reset
    inst ImageFilter_2 of ImageFilter_2 @[ChiselImProc.scala 225:47]
    ImageFilter_2.clock <= clock
    ImageFilter_2.reset <= reset
    inst ImageFilter_3 of ImageFilter_3 @[ChiselImProc.scala 225:47]
    ImageFilter_3.clock <= clock
    ImageFilter_3.reset <= reset
    inst ImageFilter_4 of ImageFilter_4 @[ChiselImProc.scala 225:47]
    ImageFilter_4.clock <= clock
    ImageFilter_4.reset <= reset
    inst ImageFilter_5 of ImageFilter_5 @[ChiselImProc.scala 225:47]
    ImageFilter_5.clock <= clock
    ImageFilter_5.reset <= reset
    inst ImageFilter_6 of ImageFilter_6 @[ChiselImProc.scala 225:47]
    ImageFilter_6.clock <= clock
    ImageFilter_6.reset <= reset
    inst ImageFilter_7 of ImageFilter_7 @[ChiselImProc.scala 225:47]
    ImageFilter_7.clock <= clock
    ImageFilter_7.reset <= reset
    ImageFilter_1.io.enq.last <= ImageFilter.io.deq.last @[ChiselImProc.scala 229:30]
    ImageFilter_1.io.enq.user <= ImageFilter.io.deq.user @[ChiselImProc.scala 229:30]
    ImageFilter_1.io.enq.bits <= ImageFilter.io.deq.bits @[ChiselImProc.scala 229:30]
    ImageFilter_1.io.enq.valid <= ImageFilter.io.deq.valid @[ChiselImProc.scala 229:30]
    ImageFilter.io.deq.ready <= ImageFilter_1.io.enq.ready @[ChiselImProc.scala 229:30]
    ImageFilter_2.io.enq.last <= ImageFilter_1.io.deq.last @[ChiselImProc.scala 229:30]
    ImageFilter_2.io.enq.user <= ImageFilter_1.io.deq.user @[ChiselImProc.scala 229:30]
    ImageFilter_2.io.enq.bits <= ImageFilter_1.io.deq.bits @[ChiselImProc.scala 229:30]
    ImageFilter_2.io.enq.valid <= ImageFilter_1.io.deq.valid @[ChiselImProc.scala 229:30]
    ImageFilter_1.io.deq.ready <= ImageFilter_2.io.enq.ready @[ChiselImProc.scala 229:30]
    ImageFilter_3.io.enq.last <= ImageFilter_2.io.deq.last @[ChiselImProc.scala 229:30]
    ImageFilter_3.io.enq.user <= ImageFilter_2.io.deq.user @[ChiselImProc.scala 229:30]
    ImageFilter_3.io.enq.bits <= ImageFilter_2.io.deq.bits @[ChiselImProc.scala 229:30]
    ImageFilter_3.io.enq.valid <= ImageFilter_2.io.deq.valid @[ChiselImProc.scala 229:30]
    ImageFilter_2.io.deq.ready <= ImageFilter_3.io.enq.ready @[ChiselImProc.scala 229:30]
    ImageFilter_4.io.enq.last <= ImageFilter_3.io.deq.last @[ChiselImProc.scala 229:30]
    ImageFilter_4.io.enq.user <= ImageFilter_3.io.deq.user @[ChiselImProc.scala 229:30]
    ImageFilter_4.io.enq.bits <= ImageFilter_3.io.deq.bits @[ChiselImProc.scala 229:30]
    ImageFilter_4.io.enq.valid <= ImageFilter_3.io.deq.valid @[ChiselImProc.scala 229:30]
    ImageFilter_3.io.deq.ready <= ImageFilter_4.io.enq.ready @[ChiselImProc.scala 229:30]
    ImageFilter_5.io.enq.last <= ImageFilter_4.io.deq.last @[ChiselImProc.scala 229:30]
    ImageFilter_5.io.enq.user <= ImageFilter_4.io.deq.user @[ChiselImProc.scala 229:30]
    ImageFilter_5.io.enq.bits <= ImageFilter_4.io.deq.bits @[ChiselImProc.scala 229:30]
    ImageFilter_5.io.enq.valid <= ImageFilter_4.io.deq.valid @[ChiselImProc.scala 229:30]
    ImageFilter_4.io.deq.ready <= ImageFilter_5.io.enq.ready @[ChiselImProc.scala 229:30]
    ImageFilter_6.io.enq.last <= ImageFilter_5.io.deq.last @[ChiselImProc.scala 229:30]
    ImageFilter_6.io.enq.user <= ImageFilter_5.io.deq.user @[ChiselImProc.scala 229:30]
    ImageFilter_6.io.enq.bits <= ImageFilter_5.io.deq.bits @[ChiselImProc.scala 229:30]
    ImageFilter_6.io.enq.valid <= ImageFilter_5.io.deq.valid @[ChiselImProc.scala 229:30]
    ImageFilter_5.io.deq.ready <= ImageFilter_6.io.enq.ready @[ChiselImProc.scala 229:30]
    ImageFilter_7.io.enq.last <= ImageFilter_6.io.deq.last @[ChiselImProc.scala 229:30]
    ImageFilter_7.io.enq.user <= ImageFilter_6.io.deq.user @[ChiselImProc.scala 229:30]
    ImageFilter_7.io.enq.bits <= ImageFilter_6.io.deq.bits @[ChiselImProc.scala 229:30]
    ImageFilter_7.io.enq.valid <= ImageFilter_6.io.deq.valid @[ChiselImProc.scala 229:30]
    ImageFilter_6.io.deq.ready <= ImageFilter_7.io.enq.ready @[ChiselImProc.scala 229:30]
    ImageFilter.io.enq.last <= io.enq.last @[ChiselImProc.scala 232:12]
    ImageFilter.io.enq.user <= io.enq.user @[ChiselImProc.scala 232:12]
    ImageFilter.io.enq.bits <= io.enq.bits @[ChiselImProc.scala 232:12]
    ImageFilter.io.enq.valid <= io.enq.valid @[ChiselImProc.scala 232:12]
    io.enq.ready <= ImageFilter.io.enq.ready @[ChiselImProc.scala 232:12]
    io.deq.last <= ImageFilter_7.io.deq.last @[ChiselImProc.scala 234:12]
    io.deq.user <= ImageFilter_7.io.deq.user @[ChiselImProc.scala 234:12]
    io.deq.bits <= ImageFilter_7.io.deq.bits @[ChiselImProc.scala 234:12]
    io.deq.valid <= ImageFilter_7.io.deq.valid @[ChiselImProc.scala 234:12]
    ImageFilter_7.io.deq.ready <= io.deq.ready @[ChiselImProc.scala 234:12]
    io.state_reg <= ImageFilter_7.io.state_reg @[ChiselImProc.scala 236:18]
    io.shadow_reg <= ImageFilter_7.io.shadow_reg @[ChiselImProc.scala 237:19]
    io.shadow_user <= ImageFilter_7.io.shadow_user @[ChiselImProc.scala 238:20]
    io.shadow_last <= ImageFilter_7.io.shadow_last @[ChiselImProc.scala 239:20]
    
